#include <vector>
using namespace std;
struct Creature;
struct Game
{
    vector<Creature*> creatures;
};

struct StatQuery
{
    enum Statistic { attack, defense } statistic;
    int result;
    StatQuery(const Statistic statistic, const int result):statistic(statistic), result(result) {}
};

struct Creature
{
protected:
    Game& game;
    int base_attack, base_defense;
    
public:
    Creature(Game &game, int base_attack, int base_defense) : game(game), base_attack(base_attack),base_defense(base_defense) {}
    virtual int get_attack() = 0;
    virtual int get_defense() = 0;
    virtual void query(StatQuery& sq) = 0;
};

class Goblin : public Creature
{
    int get_query(StatQuery::Statistic stat)
    {
        int value = (stat == StatQuery::attack ? base_attack : 0);
        StatQuery sq{stat, value};
        for (auto creature : game.creatures)
            creature->query(sq);
        return sq.result;
    }
public:
    Goblin(Game &game, int base_attack, int base_defense) : Creature(game, base_attack, base_defense) {}
    
    Goblin(Game &game) : Creature(game, 1, 1) {}
    
    int get_attack() override {
        // todo
        return get_query(StatQuery :: attack);
    }
    
    int get_defense() override {
        // todo
        return get_query(StatQuery :: defense);
    }
    
    void query(StatQuery& sq) override
    {
        if (sq.statistic == StatQuery :: defense) sq.result++;
    }
};

class GoblinKing : public Goblin
{
public:
    GoblinKing(Game &game) : Goblin(game, 3, 3) {}
    
    // todo
    int get_query(StatQuery::Statistic stat)
    {
        int value = (stat == StatQuery :: attack ? base_attack : base_defense - 1);
        StatQuery sq{stat, value};
        for (auto creature : game.creatures)
            creature->query(sq);
        return sq.result;
    }
    void query(StatQuery& sq) override
    {
        if (sq.statistic == StatQuery :: attack) sq.result++;
        else Goblin::query(sq);
    }
};
